{"status":{},"spec":{"description":"","resources":{"client_attrs":{"admin":{"y":380,"x":600},"02068c1b_deployment":{"y":-163.2913071923,"x":398.2743443375},"b654d17f-1311-d5d3-cdec-247e5285f6c5":{"y":257.9971618652,"x":763.6391601562}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0 Change Hostname"},{"kind":"app_task","name":"1 Change root password"},{"kind":"app_task","name":"2 Setup SSH"},{"kind":"app_task","name":"3 Configure Sudo"},{"kind":"app_task","name":"4 Firewall lockdown"},{"kind":"app_task","name":"5 Parse useful IPs"}],"name":"4e166d8a_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"0 Change Hostname"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"1 Change root password"}},{"from_task_reference":{"kind":"app_task","name":"1 Change root password"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2 Setup SSH"}},{"from_task_reference":{"kind":"app_task","name":"2 Setup SSH"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3 Configure Sudo"}},{"from_task_reference":{"kind":"app_task","name":"3 Configure Sudo"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4 Firewall lockdown"}},{"from_task_reference":{"kind":"app_task","name":"4 Firewall lockdown"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"5 Parse useful IPs"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0 Change Hostname","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env bash\n\n# Type:        Execute\n# Script Type: Shell\n\n# Script:\n\nset -ex\n\nsudo hostnamectl set-hostname @@{name}@@\n\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1 Change root password","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env bash\n\n# Type:        Execute\n# Script Type: Shell\n\n# Script:\n\nset -ex\n\necho '@@{admin.rootpassword}@@' | sudo passwd root --stdin","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2 Setup SSH","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env bash\n\n# Type:        Execute\n# Script Type: Shell\n\n# Script:\n\nset -ex\n\necho Create ssh group\nsudo groupadd @@{sshgroup}@@\n\necho add new user to ssh group\nsudo usermod -aG @@{sshgroup}@@ @@{admin_cred.username}@@\n\necho Disable ssh root login\nsudo sed -i 's\/#PermitRootLogin yes\/PermitRootLogin no\/g' \/etc\/ssh\/sshd_config\n\necho Disable ssh password authentication\nsudo sed -i 's\/PasswordAuthentication yes\/PasswordAuthentication no\/g' \/etc\/ssh\/sshd_config\n\necho Allow only members of ssh group to login using ssh\necho 'AllowGroups @@{sshgroup}@@' | sudo tee -a \/etc\/ssh\/sshd_config\n\nsudo service sshd restart\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3 Configure Sudo","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env bash\n\n# Type:        Execute\n# Script Type: Shell\n\n# Script:\n\nset -ex\n\necho Create sudo file for new user\n\n# We add command alias that we will block preventing users to run interactive\n# shells or to switch to root. This garantees tracking of user activity\n# Only the admin user will be able to run any command without password only from\n# localhost and except commands in NSHELLS and NSU alliases\n\nsudo touch \/etc\/sudoers.d\/@@{admin_cred.username}@@\necho \"Cmnd_Alias NSHELLS = \/bin\/sh, \/bin\/bash, \/sbin\/nologin, \/bin\/tcsh, \/bin\/csh, \/bin\/zsh, \/bin\/ksh, \/usr\/sbin\/visudo\" | sudo tee -a \/etc\/sudoers.d\/@@{admin_cred.username}@@\necho \"Cmnd_Alias NSU = \/bin\/su\" | sudo tee -a \/etc\/sudoers.d\/@@{admin_cred.username}@@\necho \"@@{admin_cred.username}@@ `hostname` = NOPASSWD:ALL, !NSHELLS, !NSU\"  | sudo tee -a \/etc\/sudoers.d\/@@{admin_cred.username}@@\n\necho Checking sudo file\nsudo cat \/etc\/sudoers.d\/@@{admin_cred.username}@@\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4 Firewall lockdown","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env bash\n\n# Type:        Execute\n# Script Type: Shell\n\n# Script:\n\nset -ex\n\necho  Firewall lockdown\nmkdir scripts\ncat > ~\/scripts\/iptablescfg.sh <<EOL\n\n#Adding 5 seconds pause to allow closing SSH session before port is changed\nsleep 5\n\n# Blocking all traffic\nsudo iptables -F\nsudo iptables -P INPUT DROP\nsudo iptables -P OUTPUT DROP\nsudo iptables -P FORWARD DROP\n\n# Open port 22 for incoming SSH connections\nsudo iptables -A INPUT -p tcp -d @@{address}@@ --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\nsudo iptables -A OUTPUT -p tcp -s @@{address}@@ --sport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\n\n# Allow outgoing SSH from anyone\nsudo iptables -A OUTPUT -p tcp -s @@{address}@@ --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\nsudo iptables -A INPUT -p tcp -d @@{address}@@ --sport 22 -m state --state NEW,ESTABLISHED -j ACCEPT\n\n# Allow outgoing NTP connections\n\nsudo iptables -A OUTPUT -p udp -s @@{address}@@ --dport 123 -d 0\/0 --sport 123 -m state --state NEW,ESTABLISHED -j ACCEPT\nsudo iptables -A INPUT -p udp -s 0\/0 --sport 123 -d @@{address}@@ --dport 123 -m state --state ESTABLISHED -j ACCEPT\n\n# Allow DNS traffic\nfor ns in `cat \/etc\/resolv.conf | grep nameserver | awk '{print $2}'`\ndos\n\tsudo iptables -A OUTPUT -p udp -s @@{address}@@ --sport 1024:65535 --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT\n\tsudo iptables -A INPUT -p udp --sport 53 -d @@{address}@@ --dport 1024:65535 -m state --state ESTABLISHED -j ACCEPT\n\tsudo iptables -A OUTPUT -p tcp -s @@{address}@@ --sport 1024:65535 --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT\n\tsudo iptables -A INPUT -p tcp --sport 53 -d @@{address}@@ --dport 1024:65535 -m state --state ESTABLISHED -j ACCEPT\ndone\n\n# Allow outgoing http\n\nsudo iptables -A OUTPUT -p tcp -s @@{address}@@ --sport 1024:65535 -d 0\/0 --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 0\/0 --sport 80 -d @@{address}@@ --dport 1024:65535 -m state --state ESTABLISHED -j ACCEPT\n\n# Allow outgoing https\n\nsudo iptables -A OUTPUT -p tcp -s @@{address}@@ --sport 1024:65535 -d 0\/0 --dport 443 -m state --state NEW,ESTABLISHED -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 0\/0 --sport 443 -d @@{address}@@ --dport 1024:65535 -m state --state ESTABLISHED -j ACCEPT\n\n# Display iptables configuration for troubleshooting\nsudo iptables -L\nEOL\n\nchmod +x \/home\/@@{admin_cred.username}@@\/scripts\/iptablescfg.sh\n\/home\/@@{admin_cred.username}@@\/scripts\/iptablescfg.sh &\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5 Parse useful IPs","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env bash\n\n# Type:        Set Variable\n# Script Type: Shell\n\n# Script:\n\nset -ex\n\n# Get the public IP address used to access the internet\ncurrentip=`wget --no-check-certificate -q checkip.dyndns.org -O index.html && cat index.html|cut -d ' ' -f 6 | cut -d '<' -f 1`\n\n# Get Prism Central IP address\npcip=\"${SSH_CLIENT%% *}\"\n\necho \"public_ip = $currentip\"\necho \"pc_ip = $pcip\"\n","eval_variables":["public_ip","pc_ip"],"eval_scope":"local","script_type":"sh","type":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"50536eb9_runbook","main_task_local_reference":{"kind":"app_task","name":"4e166d8a_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"963c48a9_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"64e8d64e_runbook","main_task_local_reference":{"kind":"app_task","name":"963c48a9_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0bf01c75_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5f87b06c_runbook","main_task_local_reference":{"kind":"app_task","name":"0bf01c75_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1 Deregister AMIs"},{"kind":"app_task","name":"2 Delete Keypairs"},{"kind":"app_task","name":"3 Delete VPCs and Dependencies"},{"kind":"app_task","name":"4 Delete IAM Roles"},{"kind":"app_task","name":"5 Delete IAM Users"},{"kind":"app_task","name":"6 Delete AWS Entries"}],"name":"8c1100ef_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1 Deregister AMIs"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2 Delete Keypairs"}},{"from_task_reference":{"kind":"app_task","name":"2 Delete Keypairs"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3 Delete VPCs and Dependencies"}},{"from_task_reference":{"kind":"app_task","name":"3 Delete VPCs and Dependencies"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4 Delete IAM Roles"}},{"from_task_reference":{"kind":"app_task","name":"4 Delete IAM Roles"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"5 Delete IAM Users"}},{"from_task_reference":{"kind":"app_task","name":"5 Delete IAM Users"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"6 Delete AWS Entries"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1 Deregister AMIs","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Deregister AMIs\n# Type:         Execute\n# Script Type:  Shell\n\n# Script:\n\nimport boto.ec2, sys, shelve, os\n\ndef treat(file):\n\n    accessID = db[\"key\"]\n    accessKEY = db[\"secret\"]\n    region = db[\"region\"]\n\n    #Connect to EC2\n    try:\n        conn = boto.ec2.connect_to_region(region, aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\n    except Exception as error:\n        print('Connection failed: %s' % (error))\n        pass\n\n    try:\n        # Delete image\n        conn.deregister_image(db[\"image_id\"], delete_snapshot=True)\n\n    except Exception as error:\n        print('An error occured while creating the image: %s' % (error))\n        pass\n\nfor file in os.listdir(\".\"):\n    try:\n        if file.endswith(\".db\"):\n            db = shelve.open(file)\n            if len(db) == 0:\n                os.remove(file)\n            else:\n                treat(file)\n    except Exception as error:\n        print('Error while deregistering AMI for project %s: %s' % (db[\"project_name\"],error))\n        pass\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2 Delete Keypairs","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Delete related keypair\n\n# Script:\n\nimport boto.ec2, sys, os, shelve\n\ndef treat(file):\n\n    accessID = db[\"key\"]\n    accessKEY = db[\"secret\"]\n    keypair_name=db[\"project\"]+'_keypair'\n\n    try:\n        conn = boto.ec2.connect_to_region(db[\"region\"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\n    except Exception as error:\n        print('Connection failed: %s' % (error))\n        pass\n\n    try:\n        # delete key pair in AWS\n        conn.delete_key_pair(keypair_name)\n    except Exception as error:\n        print('Failed to delete key pair in AWS: %s' % error)\n        pass\n\n    try:\n        # delete key pair file\n        os.remove(keypair_name+'.pem')\n    except Exception as error:\n        print('Failed to delete key pair file: %s' % error)\n        pass\n\nfor file in os.listdir(\".\"):\n    try:\n        if file.endswith(\".db\"):\n            db = shelve.open(file)\n            if len(db) == 0:\n                os.remove(file)\n            else:\n                treat(file)\n    except Exception as error:\n        print('Error while getting list of projects: %s' % (error))\n        pass\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3 Delete VPCs and Dependencies","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Create VPC\n\n# Name:         Delete VPC and dependencies\n# Type:         Execute\n# Script Type:  Shell\n# Description:\tDetach the Internet Gateway, delete the subnet, route table, security group, vpc and internet gateway\n\n# Script:\n\nimport boto, boto.vpc, sys, shelve, os\n\ndef treat(file):\n\n    accessID = db[\"key\"]\n    accessKEY = db[\"secret\"]\n\n    try:\n    \tconn = boto.vpc.connect_to_region(db[\"region\"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\n    except Exception as error:\n    \tprint('Connection failed: %s' % (error))\n    \tpass\n\n    try:\n        conn.detach_internet_gateway(db[\"gateway_id\"],db[\"vpc_id\"])\n    except Exception as error:\n    \tprint('Failed to detach internet gateway: %s' % (error))\n    \tpass\n    try:\n        conn.delete_subnet(db[\"subnet_id\"])\n    except Exception as error:\n    \tprint('Failed to delete subnet: %s' % (error))\n    \tpass\n    try:\n        conn.delete_route_table(db[\"route_table_id\"])\n    except Exception as error:\n    \tprint('Failed to delete route table: %s' % (error))\n    \tpass\n    try:\n        conn.delete_security_group(None,db[\"sg_id\"])\n    except Exception as error:\n    \tprint('Failed to delete security group: %s' % (error))\n    \tpass\n    try:\n        conn.delete_vpc(db[\"vpc_id\"])\n    except Exception as error:\n    \tprint('Failed to delete vpc: %s' % (error))\n    \tpass\n    try:\n        conn.delete_internet_gateway(db[\"gateway_id\"])\n    except Exception as error:\n    \tprint('Failed to delete internet gateway: %s' % (error))\n    \tpass\n\nfor file in os.listdir(\".\"):\n    try:\n        if file.endswith(\".db\"):\n            db = shelve.open(file)\n            if len(db) == 0:\n                os.remove(file)\n            else:\n                treat(file)\n    except Exception as error:\n        print('Error while getting list of projects: %s' % (error))\n        pass\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4 Delete IAM Roles","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tDelete IAM Role\n# Type:         Execute\n# Script type:\tShell\n\n# Script:\nimport boto, sys, shelve, os\n\ndef treat(file):\n\n    accessID = db[\"key\"]\n    accessKEY = db[\"secret\"]\n\n    try:\n    \tconn = boto.connect_iam(accessID,accessKEY)\n    except Exception as error:\n    \tprint('Connection failed: %s' % (error))\n    \tpass\n\n    try:\n    \tconn.remove_role_from_instance_profile(db[\"rolename\"], db[\"rolename\"])\n    \tconn.delete_instance_profile(db[\"rolename\"])\n    \tconn.delete_role(db[\"rolename\"])\n    except Exception as error:\n    \tprint('Error in role deletion: %s' % (error))\n    \tpass\n\nfor file in os.listdir(\".\"):\n    try:\n        if file.endswith(\".db\"):\n            db = shelve.open(file)\n            if len(db) == 0:\n                os.remove(file)\n            else:\n                treat(file)\n    except Exception as error:\n        print('Error while getting list of projects: %s' % (error))\n        pass\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5 Delete IAM Users","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tDelete IAM Users\n# Type:         Execute\n# Script type:\tShell\n\n# Script:\n\nimport boto, sys, shelve, os\n\ndef treat(file):\n\n    accessID = db[\"key\"]\n    accessKEY = db[\"secret\"]\n\n    try:\n        conn = boto.connect_iam(accessID,accessKEY)\n    except Exception as error:\n        print('Connection failed: %s' % (error))\n        pass\n\n    try:\n        conn.delete_user_policy(db[\"username\"], db[\"project\"]+'_Permissions')\n        conn.delete_access_key(db[\"proj_access_key_id\"],db[\"username\"])\n        conn.delete_user(db[\"username\"])\n    except Exception as error:\n        print('Error in user deletion: %s' % (error))\n        pass\n\nfor file in os.listdir(\".\"):\n    try:\n        if file.endswith(\".db\"):\n            db = shelve.open(file)\n            if len(db) == 0:\n                os.remove(file)\n            else:\n                treat(file)\n    except Exception as error:\n        print('Error while getting list of projects: %s' % (error))\n        pass\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"6 Delete AWS Entries","attrs":{"exit_status":[],"script":"#!\/bin\/env python\n\n# Name:         Delete AWS Calm Entry\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Delete the related AWS entry in Calm Settings\n\n# Script:\n\nimport requests, json, urllib3, shelve, sys, os\nfrom requests.auth import HTTPBasicAuth\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\ndef treat(file):\n\n    # Get account UUID\n    try:\n        url = \"https:\/\/@@{pc_ip}@@:9440\/api\/nutanix\/v3\/accounts\/list\"\n        data = {\"filter\" : \"name==\"+db[\"username\"]}\n\n        myResponse = requests.post(url,json=data,auth=HTTPBasicAuth(db[\"pc_user\"],db[\"pc_password\"]), verify=False)\n\n        if(myResponse.ok):\n\n            jData = json.loads(myResponse.content)\n            uuid = (jData[\"entities\"][0][\"metadata\"][\"uuid\"])\n\n        else:\n            myResponse.raise_for_status()\n\n    except Exception as error:\n        print('Error while getting UUID: %s' % (error))\n        pass\n\n\n# Delete account\n\ntry:\n\n    url = \"https:\/\/@@{pc_ip}@@:9440\/api\/nutanix\/v3\/accounts\/\"+uuid\n\n    myResponse = requests.delete(url,json=data,auth=HTTPBasicAuth(db[\"pc_user\"],db[\"pc_password\"]), verify=False)\n\n    if(myResponse.ok):\n\n        jData = json.loads(myResponse.content)\n\n        for key in jData:\n            formatted_json = json.dumps(jData[key], indent=4)\n            print str(key) + \" : \" + formatted_json\n    else:\n        myResponse.raise_for_status()\n\nexcept Exception as error:\n    print('Error while deleting account: %s' % (error))\n    pass\n\nfor file in os.listdir(\".\"):\n    try:\n        if file.endswith(\".db\"):\n            db = shelve.open(file)\n            if len(db) == 0:\n                os.remove(file)\n            else:\n                treat(file)\n    except Exception as error:\n        print('Error while getting list of projects: %s' % (error))\n        pass\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"a5759f21_runbook","main_task_local_reference":{"kind":"app_task","name":"8c1100ef_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7ccf7e02_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"4b76ccbd_runbook","main_task_local_reference":{"kind":"app_task","name":"7ccf7e02_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[],"name":"admin","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","description":"","name":"rootpassword","type":"SECRET","value":"","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"sshgroup","type":"LOCAL","value":"sshusers","label":"","attrs":{"type":""}},{"val_type":"STRING","description":"","name":"pc_ip","type":"LOCAL","value":"","label":""},{"val_type":"STRING","description":"","name":"public_ip","type":"LOCAL","value":"","label":"","attrs":{"type":""}},{"val_type":"STRING","description":"","name":"ssh_key","type":"LOCAL","value":"","label":"","attrs":{"type":""},"editables":{"value":true}}],"description":""}],"substrate_definition_list":[{"description":"","action_list":[],"type":"AHV_VM","name":"admin_vm","readiness_probe":{"connection_type":"SSH","retries":"5","disable_readiness_probe":false,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"0","connection_port":22,"login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{},"disk_list":{}}}},"os_type":"Linux","create_spec":{"name":"admin-@@{calm_array_index}@@-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"c92c4109-c831-4066-bf3b-ca1a952a7396"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":1,"gpu_list":[],"memory_size_mib":1024,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nusers:\n  - name: @@{admin_cred.username}@@\n    ssh-authorized-keys:\n      - @@{admin.ssh_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']\n"},"type":"","sysprep":null},"power_state":"ON","type":"","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"CentOS","uuid":"e26d373b-6286-b4da-e6b6-984fb5d3d68d"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]}],"credential_definition_list":[{"username":"centos","description":"","type":"KEY","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"admin_cred","editables":{"username":true,"secret":true}}],"package_definition_list":[{"description":"","action_list":[],"type":"SUBSTRATE_IMAGE","service_local_reference_list":[],"name":"CentOS","version":"","options":{"type":"","name":"CentOS-7-x86_64-GenericCloud","resources":{"image_type":"DISK_IMAGE","checksum":{},"source_uri":"https:\/\/cloud.centos.org\/centos\/7\/images\/CentOS-7-x86_64-GenericCloud.qcow2","version":{"product_version":"latest","type":"","product_name":"CentOS x86_64"},"architecture":"X86_64","type":""},"description":""},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"admin"}],"name":"admin_pkg","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"admin_pkg"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"Install"}],"name":"f9376d5c_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"Install","state":"ACTIVE","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env bash\n\n# Type:        Execute\n# Script Type: Shell\n\n# Script:\n\nsudo yum update -y\nsudo yum install nano htop -y\n\nsudo yum install epel-release python -y\nsudo yum install python-pip -y\nsudo yum install wget -y\n\nsudo pip install --upgrade pip\nsudo pip install boto netaddr\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"491e51f6_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"f9376d5c_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"admin_pkg"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"1e732f5a_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"37a64a86_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"1e732f5a_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"depends_on_list":[],"name":"02068c1b_deployment","published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"admin_pkg"}],"substrate_local_reference":{"kind":"app_substrate","name":"admin_vm"},"min_replicas":"1","variable_list":[],"description":""}],"description":"","action_list":[{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0 Create Flat File"},{"kind":"app_task","name":"1 Create IAM Role"},{"kind":"app_task","name":"2 Create IAM user and policy"},{"kind":"app_task","name":"3 Create AWS Calm Entry"},{"kind":"app_task","name":"4 Create VPC"},{"kind":"app_task","name":"5 Validate Network"},{"kind":"app_task","name":"6 Create subnet"},{"kind":"app_task","name":"7 Create security group and open ports"},{"kind":"app_task","name":"8 Create keypair"},{"kind":"app_task","name":"9 Create CentOS Instance"},{"kind":"app_task","name":"10 Update CentOS Instance"},{"kind":"app_task","name":"11 Create CentOS Image"},{"kind":"app_task","name":"12 Clean up"}],"name":"237562a4_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"0 Create Flat File"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"1 Create IAM Role"}},{"from_task_reference":{"kind":"app_task","name":"1 Create IAM Role"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2 Create IAM user and policy"}},{"from_task_reference":{"kind":"app_task","name":"2 Create IAM user and policy"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3 Create AWS Calm Entry"}},{"from_task_reference":{"kind":"app_task","name":"3 Create AWS Calm Entry"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4 Create VPC"}},{"from_task_reference":{"kind":"app_task","name":"4 Create VPC"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"5 Validate Network"}},{"from_task_reference":{"kind":"app_task","name":"5 Validate Network"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"6 Create subnet"}},{"from_task_reference":{"kind":"app_task","name":"6 Create subnet"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"7 Create security group and open ports"}},{"from_task_reference":{"kind":"app_task","name":"7 Create security group and open ports"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"8 Create keypair"}},{"from_task_reference":{"kind":"app_task","name":"8 Create keypair"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"9 Create CentOS Instance"}},{"from_task_reference":{"kind":"app_task","name":"9 Create CentOS Instance"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"10 Update CentOS Instance"}},{"from_task_reference":{"kind":"app_task","name":"10 Update CentOS Instance"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"11 Create CentOS Image"}},{"from_task_reference":{"kind":"app_task","name":"11 Create CentOS Image"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"12 Clean up"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0 Create Flat File","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tCreate flat file\n# Type:         Execute\n# Script type:  Shell\n# Description:  Create a flat file named after the project name Variable\n#               and save variables inside\n# Script Type:  Shell\n\n# Script:\n\nimport shelve, sys, re, os.path\n\n# Validate project name\ntry:\n    reg=re.compile('^[a-zA-Z0-9\\_]+$')\n    if not reg.match('@@{project_name}@@'):\n        raise Exception('The project name can only contain A-Z, a-z, 0-9 and underscore characters')\nexcept Exception as error:\n    print('Project name validation failed: %s' % (error))\n    sys.exit(1)\n\n# Check if project exist\ntry:\n    if os.path.exists(\"@@{project_name}@@.db\"):\n        raise Exception('This project already exist. Please use a unique project name')\nexcept Exception as error:\n    print('Error while creating a new project: %s' % (error))\n    sys.exit(1)\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\n    db[\"project\"] = \"@@{project_name}@@\"\n    db[\"secret\"] = \"@@{aws_secret_access_key}@@\"\n    db[\"key\"] = \"@@{aws_access_key_id}@@\"\n    db[\"region\"] = \"@@{region}@@\"\n    db[\"cidr\"] = \"@@{cidr}@@\"\n    db[\"subnet\"] = \"@@{subnet}@@\"\n    db[\"ami_id\"] = \"@@{ami_id}@@\"\n    db[\"instance_type\"] = \"@@{instance_type}@@\"\n    db[\"tcp_ports\"] = \"@@{tcp_ports}@@\"\n    db[\"udp_ports\"] = \"@@{udp_ports}@@\"\n    db[\"pc_user\"] = \"@@{pc_user}@@\"\n    db[\"pc_password\"] = \"@@{pc_password}@@\"\nexcept Exception as error:\n    print('Error while creating flat file: %s' % (error))\n    sys.exit(1)\n\nfor key in list(db.keys()):\n    print(key+\": \"+db[key])\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to save variables to flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1 Create IAM Role","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tCreate IAM Role\n# Type:         Execute\n# Script type:\tShell\n# Description:\tCreate an IAM role on the AWS account\n# Script Type:  Shell\n# New keys:\t\trolename\n\n# Script:\nimport boto, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ndb[\"rolename\"] = db[\"project\"]+'_role'\n\ntry:\n\tconn = boto.connect_iam(accessID,accessKEY)\nexcept Exception as error:\n\tprint('Connection failed: %s' % (error))\n\tsys.exit(1)\n\ntry:\n\trole_response = conn.create_role(db[\"rolename\"])\n\tprofile = conn.create_instance_profile(db[\"rolename\"])\n\tconn.add_role_to_instance_profile(db[\"rolename\"], db[\"rolename\"])\nexcept Exception as error:\n\tprint('Error in role creation: %s' % (error))\n\tsys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2 Create IAM user and policy","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Create IAM User and policy\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Create an IAM user and attach a security policy as per\n#                 Calm requirements. Then parse access key and secret access key\n# New flat      username\n#   file keys:  proj_access_key_id\n#               proj_secret_access_key\n#               username\n\n# Script:\n\nimport boto, sys, json, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ndb[\"username\"] = db[\"project\"]+'_user'\n\ntry:\n    conn = boto.connect_iam(accessID,accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n    user_response = conn.create_user(db[\"username\"])\n    # Create Policy for new user\n    key_response = conn.create_access_key(db[\"username\"])\n    policy = {'Version': '2012-10-17'}\n    policy['Statement'] = [{'Effect': 'Allow',\n                        'Action': 'ec2:*',\n                        'Resource': '*'},\n                       {'Effect': 'Allow',\n                        'Action': 'iam:PassRole',\n                        'Action': 'iam:ListRoles',\n                        'Resource': '*'}]\n    policy_json = json.dumps(policy, indent=2)\n    conn.put_user_policy(db[\"username\"], db[\"project\"]+'_Permissions', policy_json)\n    conn.update_access_key(key_response.access_key_id, 'Inactive', db[\"username\"])\n#     db[proj_username] = db[username]\n    db[\"proj_access_key_id\"] = key_response.access_key_id\n    db[\"proj_secret_access_key\"] = key_response.secret_access_key\n\nexcept Exception as error:\n    print('Error in user creation: %s' % (error))\n    sys.exit(1)\n\n# print('proj_username = %s' % username)\n# print('proj_access_key_id = %s' % key_response.access_key_id)\n# print('proj_secret_access_key = %s' % key_response.secret_access_key)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3 Create AWS Calm Entry","attrs":{"exit_status":[],"script":"#!\/bin\/env python\n\n# Name:         Create AWS Calm Entry\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Create an AWS entry in Calm Settings with newly created account\n\n# Script:\n\nimport requests, json, urllib3, shelve, sys\nfrom requests.auth import HTTPBasicAuth\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\nurl = \"https:\/\/@@{pc_ip}@@:9440\/api\/nutanix\/v3\/accounts\"\n\ndata = {\n   \"api_version\": \"3.0\",\n   \"metadata\": {\n      \"kind\": \"account\"\n   },\n   \"spec\": {\n      \"name\": db[\"username\"],\n      \"description\": \"AWS Account using IAM user \"+db[\"username\"],\n      \"resources\": {\n         \"type\": \"aws\",\n         \"data\": {\n            \"regions\": [\n               {\n                  \"name\": \"@@{region}@@\"\n               }\n            ],\n            \"access_key_id\": db[\"proj_access_key_id\"],\n            \"secret_access_key\": {\n               \"value\": db[\"proj_secret_access_key\"],\n               \"attrs\": {\n                  \"is_secret_modified\": \"true\"\n               }\n            }\n         }\n      }\n   }\n}\n\nmyResponse = requests.post(url,json=data,auth=HTTPBasicAuth(db[\"pc_user\"],db[\"pc_password\"]), verify=False)\n\nif(myResponse.ok):\n\n    jData = json.loads(myResponse.content)\n\n    print(\"The response contains {0} properties\".format(len(jData)))\n    print(\"\\n\")\n    for key in jData:\n        formatted_json = json.dumps(jData[key], indent=4)\n        print str(key) + \" : \" + formatted_json\nelse:\n    myResponse.raise_for_status()\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4 Create VPC","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Create VPC\n\n# Name:         Create VPC\n# Type:         Execute\n# Script Type:  Shell\n# Description:\tCreate a new VPC, a gateway, and connect the VPC to the gateway\n# New keys:     vpc_id\n#               gateway_id\n\n# Script:\n\nimport boto, boto.vpc, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ntry:\n\tconn = boto.vpc.connect_to_region(db[\"region\"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\nexcept Exception as error:\n\tprint('Connection failed: %s' % (error))\n\tsys.exit(1)\n\ntry:\n\t#Create VPC\n    vpc = conn.create_vpc(db[\"cidr\"])\n\n    # Configure the VPC to support DNS resolution and hostname assignment\n    conn.modify_vpc_attribute(vpc.id, enable_dns_support=True)\n    conn.modify_vpc_attribute(vpc.id, enable_dns_hostnames=True)\n\n    # Create an internet gateway\n    gateway = conn.create_internet_gateway()\n\n    # Attach the gateway to the VPC\n    conn.attach_internet_gateway(gateway.id, vpc.id)\n\n    db[\"vpc_id\"] = vpc.id\n    db[\"gateway_id\"] = gateway.id\n\nexcept Exception as error:\n    print('An error occured while creating the VPC: %s' % (error))\n    sys.exit(1)\n\n# print('vpc_id = %s' % vpc.id)\n# print('gateway_id = %s' % gateway.id)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5 Validate Network","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Validate Network\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Verify is Subnet fits into CIDR\n# Script:\n\nimport netaddr, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\n\n\ntry:\n    substat = netaddr.IPNetwork(db[\"cidr\"]).first <= netaddr.IPNetwork(db[\"subnet\"]).last and netaddr.IPNetwork(db[\"subnet\"]).first <= netaddr.IPNetwork(db[\"cidr\"]).last\n    if not substat:\n        raise Exception('The subnet does not fit into the CIDR')\n\nexcept Exception as error:\n    print('An error occured while validating the subnet: %s' % (error))\n    sys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"6 Create subnet","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Create Subnet\n# Type:         Execute\n# Script Type:  Shell\n# New keys:     subnet_id\n#               subnet_az\n#               subnet_table_id\n\n# Script:\n\nimport boto.vpc, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ntry:\n    conn = boto.vpc.connect_to_region(db[\"region\"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n\t#Create subnet\n    sub = conn.create_subnet(db[\"vpc_id\"], db[\"subnet\"])\n    db[\"subnet_id\"] = sub.id\n    db[\"subnet_az\"] = sub.availability_zone\n\n    # Create a Route Table\n    route_table = conn.create_route_table(db[\"vpc_id\"])\n\n    # Associate the route table with the subnet\n    conn.associate_route_table(route_table.id, sub.id)\n\n    # Add a route from the gateway to the attach_internet_gateway\n    route = conn.create_route(route_table.id, '0.0.0.0\/0', db[\"gateway_id\"])\n\n    db[\"route_table_id\"] = route_table.id\n\nexcept Exception as error:\n    print('An error occured while creating and configuring the subnet: %s' % (error))\n    sys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7 Create security group and open ports","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Create Security Group and open ports\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Create a security group in the previously created vpc\n#               Then, open TCP and UDP ports allowing only current PC public IP\n# New keys:     sg_id\n\n# Script:\n\nimport boto.vpc, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\ngroup_name=db[\"project\"]+'_SG'\ngroup_desc = 'Security Group for '+db[\"project\"]\ndb[\"tcp\"] = [@@{tcp_ports}@@]\ndb[\"udp\"] = [@@{udp_ports}@@]\n\n\ntry:\n    conn = boto.vpc.connect_to_region(db[\"region\"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n    #Create security group\n    sg = conn.create_security_group(group_name, group_desc, db[\"vpc_id\"])\n    db[\"sg_id\"] = sg.id\n\nexcept Exception as error:\n    print('An error occured while creating the security group: %s' % (error))\n    sys.exit(1)\n\n# print('sg_id = %s' % sg.id)\n\n# Function to open ports only from your public IP\ndef open_port(protocol, port):\n    sg.authorize(protocol, port, port, cidr_ip='@@{public_ip}@@\/32')\n\nfor protocol in (\"tcp\", \"udp\"):\n\n    try:\n        if len(db[protocol]) > 0:\n            #Open tcp ports\n            for port in db[protocol]:\n                open_port(protocol, port)\n\n    except Exception as error:\n        print('An error occured while opening %s ports: %s' % (protocol,error))\n        sys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"8 Create keypair","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Create keypair\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Generate a keypair, download file and save keys in flat file\n\n# Script:\n\nimport boto.ec2, sys, os, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\nkeypair_name=db[\"project\"]+'_keypair'\n\ntry:\n    conn = boto.ec2.connect_to_region(db[\"region\"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n# Create key pair\n    keypair = conn.create_key_pair(keypair_name)\n\n    # Download key pair\n    keypair.save('.')\n    os.chmod(keypair_name+'.pem', 0400)\nexcept Exception as error:\n    print('Keypair creation of download failed: %s' % error)\n    sys.exit(1)\n\n# print(os.popen('cat %s.pem\\n' % keypair_name).read())\ndb[\"private_key\"] = os.popen('cat %s.pem\\n' % keypair_name).read()\n# print(os.popen('ssh-keygen -y -f %s.pem\\n' % keypair_name).read())\ndb[\"public_key\"] = os.popen('ssh-keygen -y -f %s.pem\\n' % keypair_name).read()\n\nprint ('Your key pair file has been downloaded in %s\/%s.pem' % (os.getcwd(), keypair_name))\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9 Create CentOS Instance","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Create CentOS instance\n# Type:         Execute\n# Script Type:  Shell\n# New keys:     eip_allocation_id\n#               public_ddns_name\n#               instance_id\n\n# Script:\n\nimport boto.ec2, sys, time, shelve, signal\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Failed to open flat file: %s' % (error))\n    sys.exit(1)\n\n# Create a timeout class\n\nclass TimeoutError(Exception):\n    pass\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\nregion = db[\"region\"]\nsg_id = db[\"sg_id\"]\nsubnet_id = db[\"subnet_id\"]\ninstance_type = db[\"instance_type\"]\nami_id = db[\"ami_id\"]\nkeypair_name = db[\"project\"]+'_keypair'\n\nclass timeout:\n    def __init__(self, seconds=1, error_message='Timeout'):\n        self.seconds = seconds\n        self.error_message = error_message\n    def handle_timeout(self, signum, frame):\n        raise TimeoutError(self.error_message)\n    def __enter__(self):\n        signal.signal(signal.SIGALRM, self.handle_timeout)\n        signal.alarm(self.seconds)\n    def __exit__(self, type, value, traceback):\n        signal.alarm(0)\n\n#Connect to EC2\ntry:\n    conn = boto.ec2.connect_to_region(region, aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n    # Run an instance in our new VPC\n    reservation = conn.run_instances(ami_id, key_name=keypair_name, security_group_ids=[sg_id], instance_type=instance_type, subnet_id=subnet_id)\n    instance = reservation.instances[0]\n\n    # Wait for the instance to be running: Time out at 120 seconds\n    print('Waiting for instance to be running: Timeout 120 seconds')\n    with timeout(seconds=120):\n        while instance.state != 'running':\n            instance.update()\n            time.sleep(1)\n\nexcept Exception as error:\n    print('An error occured while running the instance: %s' % (error))\n    sys.exit(1)\n\ntry:\n# Create an EIP\n    eip = conn.allocate_address(domain='vpc')\n\n# And associate the EIP with our instance\n    conn.associate_address(instance_id=instance.id, allocation_id=eip.allocation_id)\n\n    # Wait until Public DNS name is actve, time out after 30 secs\n    print('Waiting for public DNS name: Timeout 30 seconds')\n    with timeout(seconds=30):\n        while not instance.public_dns_name:\n            instance.update()\n            time.sleep(1)\n\n    db[\"eip_allocation_id\"] = eip.allocation_id\n    db[\"public_ddns_name\"] = instance.public_dns_name\n    db[\"instance_id\"] = instance.id\n\nexcept Exception as error:\n    print('An error occured while allocating Elastic IP: %s' % (error))\n    sys.exit(1)\n\nprint('Public IP: %s\\n' % format(eip.public_ip))\nprint('DNS name: %s (%s)\\n' % (instance.public_dns_name, eip.public_ip))\n\n# print('eip_allocation_id = %s' % eip.allocation_id)\n# print('public_ddns_name = %s' % instance.public_dns_name)\n# print('instance_id = %s' % instance.id)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"10 Update CentOS Instance","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Update CentOS\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Update CentOS in the AWS Instance\n\nimport sys, subprocess, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Failed to open flat file: %s' % (error))\n    sys.exit(1)\n\nhost = db[\"public_ddns_name\"]\nuser = 'centos'\nlogin = user+'@'+host\nkey = db[\"project\"]+'_keypair.pem'\n\n# update OS in instance\nprint 'yum update'\nprint '----------'\nrunyum = subprocess.Popen([\"ssh\", login, \"-o\", \"UserKnownHostsFile=\/dev\/null\", \"-o\", \"StrictHostKeyChecking=no\", \"-i\", key, \"sudo yum update -y\"],shell=False,stdout=subprocess.PIPE,bufsize=1,stderr=subprocess.PIPE)\nfor line in iter(runyum.stdout.readline, b''):\n    print line,\nrunyum.stdout.close()\nrunyum.wait()\nprint\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"11 Create CentOS Image","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Create CentOS Image\n# Type:         Execute\n# Script Type:  Shell\n\n# Script:\n\nimport boto.ec2, sys, time, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Failed to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\nregion = db[\"region\"]\nimage_name=db[\"project\"]+'_image'\nimage_desc='CentOS 7 x64 image for '+db[\"project\"]\ninstance_id = db[\"instance_id\"]\n\n\n\n# Create a timeout class\nimport signal\n\nclass TimeoutError(Exception):\n    pass\n\nclass timeout:\n    def __init__(self, seconds=1, error_message='Timeout'):\n        self.seconds = seconds\n        self.error_message = error_message\n    def handle_timeout(self, signum, frame):\n        raise TimeoutError(self.error_message)\n    def __enter__(self):\n        signal.signal(signal.SIGALRM, self.handle_timeout)\n        signal.alarm(self.seconds)\n    def __exit__(self, type, value, traceback):\n        signal.alarm(0)\n\n#Connect to EC2\ntry:\n    conn = boto.ec2.connect_to_region(region, aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n    # Create an image\n    image_id = conn.create_image(instance_id,image_name,image_desc)\n    image = conn.get_all_images(image_ids=[image_id])[0]\n    db[\"image_id\"] = image_id\n\n\t# Wait for image to be available\n    print('Creating image: Time out 240 seconds')\n    with timeout(seconds=240):\n        start_time = time.time()\n        while image.state != 'available':\n            image.update()\n            time.sleep(1)\n        print(\"--- %s seconds ---\" % (time.time() - start_time))\n\nexcept Exception as error:\n    print('An error occured while creating the image: %s' % (error))\n    sys.exit(1)\n\nprint('ImageID: %s' % image)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"12 Clean up","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name:         Clean Up\n# Type:         Execute\n# Script Type:  Shell\n\n# Script:\n\nimport boto.ec2, sys, time, shelve, signal\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Failed to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\nregion = db[\"region\"]\n\n# Create a timeout class\n\nclass TimeoutError(Exception):\n    pass\n\nclass timeout:\n    def __init__(self, seconds=1, error_message='Timeout'):\n        self.seconds = seconds\n        self.error_message = error_message\n    def handle_timeout(self, signum, frame):\n        raise TimeoutError(self.error_message)\n    def __enter__(self):\n        signal.signal(signal.SIGALRM, self.handle_timeout)\n        signal.alarm(self.seconds)\n    def __exit__(self, type, value, traceback):\n        signal.alarm(0)\n\n#Connect to EC2\ntry:\n    conn = boto.ec2.connect_to_region(db[\"region\"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ni = conn.get_all_instances(instance_ids=db[\"instance_id\"])\ninstance = i[0].instances[0]\n\ntry:\n    # Get list of volumes\n    vol = conn.get_all_volumes(filters={'attachment.instance-id': instance.id})\n\n    # Wait for the instance to be terminated: Time out at 60 seconds\n    print('Terminating instance: Timeout in 240 seconds')\n    with timeout(seconds=240):\n        conn.terminate_instances(instance_ids=instance.id)\n        while instance.state != 'terminated':\n            instance.update()\n            time.sleep(1)\nexcept Exception as error:\n    print('An error occured while termineting the instance with instance id %s: %s' % (instance.id, error))\n    sys.exit(1)\n\n# Delete volumes\ntry:\n    for volume in vol:\n        conn.delete_volume(volume.id)\n\nexcept Exception as error:\n    print('An error occured while deleting volumes: %s' % error)\n\n# Release eip\ntry:\n    conn.release_address(allocation_id=db[\"eip_allocation_id\"])\nexcept Exception as error:\n    print('An error occured while releasing IP: %s' % error)\n    sys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"f2a3ff62_runbook","main_task_local_reference":{"kind":"app_task","name":"237562a4_dag"},"variable_list":[{"val_type":"STRING","description":"","name":"project_name","type":"LOCAL","value":"","label":"","attrs":{"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"aws_access_key_id","type":"LOCAL","value":"","label":"","attrs":{"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"aws_secret_access_key","type":"SECRET","value":"","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"region","type":"LOCAL","value":"eu-west-2","label":"","attrs":{"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"cidr","type":"LOCAL","value":"10.0.0.0\/16","label":"","attrs":{"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"subnet","type":"LOCAL","value":"10.0.10.0\/24","label":"","attrs":{"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"ami_id","type":"LOCAL","value":"ami-ee6a718a","label":"","attrs":{"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"instance_type","type":"LOCAL","value":"t2.micro","label":"","attrs":{"type":""}},{"val_type":"STRING","description":"","name":"tcp_ports","type":"LOCAL","value":"22,80,443,53","label":"","attrs":{"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"udp_ports","type":"LOCAL","value":"53","label":"","attrs":{"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"pc_user","type":"LOCAL","value":"","label":"","attrs":{"type":""},"editables":{"value":true}},{"val_type":"STRING","description":"","name":"pc_password","type":"SECRET","value":"","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":""},"editables":{"value":true}}]},"name":"Create Project"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Activate IAM Key"}],"name":"6ca39faf_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Activate IAM Key","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tActivate the User Access Key\n# Type:         Execute\n# Script type:\tShell\n# Variable:     project_name\n\n# Script:\n\nimport boto, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ntry:\n    conn = boto.connect_iam(accessID,accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n    conn.update_access_key(db[\"proj_access_key_id\"], 'Active', db[\"username\"])\nexcept Exception as error:\n    print('Error in activating key: %s' % (error))\n    sys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"ef86b126_runbook","main_task_local_reference":{"kind":"app_task","name":"6ca39faf_dag"},"variable_list":[{"val_type":"STRING","description":"","name":"project_name","type":"LOCAL","value":"","label":"","attrs":{"type":""},"editables":{"value":true}}]},"name":"Activate IAM Key"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"Deactivate IAM Key"}],"name":"c6a945be_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"Deactivate IAM Key","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tDeactivate the User Access Key\n# Type:         Execute\n# Script type:\tShell\n\n# Script:\n\nimport boto, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ntry:\n    conn = boto.connect_iam(accessID,accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n    conn.update_access_key(db[\"proj_access_key_id\"], 'Inactive', db[\"username\"])\nexcept Exception as error:\n    print('Error in activating key: %s' % (error))\n    sys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"5852c9bc_runbook","main_task_local_reference":{"kind":"app_task","name":"c6a945be_dag"},"variable_list":[{"val_type":"STRING","description":"","name":"project_name","type":"LOCAL","value":"","label":"","attrs":{"type":""},"editables":{"value":true}}]},"name":"Deactivate IAM Key"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"List projects"}],"name":"d30fae7a_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"List projects","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\nimport sys, os, shelve\n\ntry:\n    for file in os.listdir(\".\"):\n        if file.endswith(\".db\"):\n            db = shelve.open(file)\n            if len(db) == 0:\n                os.remove(file)\n            else:\n                print(os.path.splitext(file)[0])\nexcept Exception as error:\n    print('Error while getting list of projects: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"096f871a_runbook","main_task_local_reference":{"kind":"app_task","name":"d30fae7a_dag"},"variable_list":[]},"name":"List Projects"},{"description":"","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"0 Check Project"},{"kind":"app_task","name":"1 Deregister AMI"},{"kind":"app_task","name":"2 Delete keypair"},{"kind":"app_task","name":"3 Delete VPC and dependencies"},{"kind":"app_task","name":"4 Delete IAM Role"},{"kind":"app_task","name":"5 Delete IAM User"},{"kind":"app_task","name":"6 Delete Calm AWS Entry"},{"kind":"app_task","name":"7 Delete Project Flat File"}],"name":"67d7fda9_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"0 Check Project"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"1 Deregister AMI"}},{"from_task_reference":{"kind":"app_task","name":"1 Deregister AMI"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2 Delete keypair"}},{"from_task_reference":{"kind":"app_task","name":"2 Delete keypair"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3 Delete VPC and dependencies"}},{"from_task_reference":{"kind":"app_task","name":"3 Delete VPC and dependencies"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4 Delete IAM Role"}},{"from_task_reference":{"kind":"app_task","name":"4 Delete IAM Role"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"5 Delete IAM User"}},{"from_task_reference":{"kind":"app_task","name":"5 Delete IAM User"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"6 Delete Calm AWS Entry"}},{"from_task_reference":{"kind":"app_task","name":"6 Delete Calm AWS Entry"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"7 Delete Project Flat File"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"0 Check Project","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tCheck Project\n# Type:         Execute\n# Script type:\tShell\n# Description:\tVerify if project to delete exists\n# Script Type:  Shell\n\nimport boto, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file for project @@{project_name}@@: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ntry:\n    conn = boto.connect_iam(accessID,accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1 Deregister AMI","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tCheck Project\n# Type:         Execute\n# Script type:\tShell\n# Description:\tVerify if project to delete exists\n# Script Type:  Shell\n\nimport boto, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file for project @@{project_name}@@: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ntry:\n    conn = boto.connect_iam(accessID,accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2 Delete keypair","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Delete related keypair\n\n# Script:\n\nimport boto.ec2, sys, os, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\nkeypair_name=db[\"project\"]+'_keypair'\n\ntry:\n    conn = boto.ec2.connect_to_region(db[\"region\"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n    # delete key pair in AWS\n    conn.delete_key_pair(keypair_name)\nexcept Exception as error:\n    print('Failed to delete key pair in AWS: %s' % error)\n    sys.exit(1)\n\ntry:\n    # delete key pair file\n    os.remove(keypair_name+'.pem')\nexcept Exception as error:\n    print('Failed to delete key pair file: %s' % error)\n    sys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3 Delete VPC and dependencies","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Create VPC\n\n# Name:         Delete VPC and dependencies\n# Type:         Execute\n# Script Type:  Shell\n# Description:\tDetach the Internet Gateway, delete the subnet, route table, security group, vpc and internet gateway\n\n# Script:\n\nimport boto, boto.vpc, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ntry:\n\tconn = boto.vpc.connect_to_region(db[\"region\"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)\nexcept Exception as error:\n\tprint('Connection failed: %s' % (error))\n\tsys.exit(1)\n\n\n\n\ntry:\n    conn.detach_internet_gateway(db[\"gateway_id\"],db[\"vpc_id\"])\nexcept Exception as error:\n\tprint('Failed to detach internet gateway: %s' % (error))\n\tsys.exit(1)\ntry:\n    conn.delete_subnet(db[\"subnet_id\"])\nexcept Exception as error:\n\tprint('Failed to delete subnet: %s' % (error))\n\tsys.exit(1)\ntry:\n    conn.delete_route_table(db[\"route_table_id\"])\nexcept Exception as error:\n\tprint('Failed to delete route table: %s' % (error))\n\tsys.exit(1)\ntry:\n    conn.delete_security_group(None,db[\"sg_id\"])\nexcept Exception as error:\n\tprint('Failed to delete security group: %s' % (error))\n\tsys.exit(1)\ntry:\n    conn.delete_vpc(db[\"vpc_id\"])\nexcept Exception as error:\n\tprint('Failed to delete vpc: %s' % (error))\n\tsys.exit(1)\ntry:\n    conn.delete_internet_gateway(db[\"gateway_id\"])\nexcept Exception as error:\n\tprint('Failed to delete internet gateway: %s' % (error))\n\tsys.exit(1)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4 Delete IAM Role","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tDelete IAM User and Role\n# Type:         Execute\n# Script type:\tShell\n\n# Script:\nimport boto, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ntry:\n\tconn = boto.connect_iam(accessID,accessKEY)\nexcept Exception as error:\n\tprint('Connection failed: %s' % (error))\n\tsys.exit(1)\n\ntry:\n\tconn.remove_role_from_instance_profile(db[\"rolename\"], db[\"rolename\"])\n\tconn.delete_instance_profile(db[\"rolename\"])\n\tconn.delete_role(db[\"rolename\"])\nexcept Exception as error:\n\tprint('Error in role deletion: %s' % (error))\n\tsys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5 Delete IAM User","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env python\n\n# Name: \t\tDelete IAM User\n# Type:         Execute\n# Script type:\tShell\n\n# Script:\n\nimport boto, sys, shelve\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\naccessID = db[\"key\"]\naccessKEY = db[\"secret\"]\n\ntry:\n    conn = boto.connect_iam(accessID,accessKEY)\nexcept Exception as error:\n    print('Connection failed: %s' % (error))\n    sys.exit(1)\n\ntry:\n    conn.delete_user_policy(db[\"username\"], db[\"project\"]+'_Permissions')\n    conn.delete_access_key(db[\"proj_access_key_id\"],db[\"username\"])\n    conn.delete_user(db[\"username\"])\nexcept Exception as error:\n    print('Error in user deletion: %s' % (error))\n    sys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"6 Delete Calm AWS Entry","attrs":{"exit_status":[],"script":"#!\/bin\/env python\n\n# Name:         Delete AWS Calm Entry\n# Type:         Execute\n# Script Type:  Shell\n# Description:  Delete the related AWS entry in Calm Settings\n\n# Script:\n\nimport requests, json, urllib3, shelve, sys\nfrom requests.auth import HTTPBasicAuth\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\ntry:\n    db = shelve.open(\"@@{project_name}@@.db\")\nexcept Exception as error:\n    print('Unable to open flat file: %s' % (error))\n    sys.exit(1)\n\n# Get account UUID\ntry:\n    url = \"https:\/\/@@{pc_ip}@@:9440\/api\/nutanix\/v3\/accounts\/list\"\n    data = {\"filter\" : \"name==\"+db[\"username\"]}\n\n    myResponse = requests.post(url,json=data,auth=HTTPBasicAuth(db[\"pc_user\"],db[\"pc_password\"]), verify=False)\n\n    if(myResponse.ok):\n\n        jData = json.loads(myResponse.content)\n        uuid = (jData[\"entities\"][0][\"metadata\"][\"uuid\"])\n\n    else:\n        myResponse.raise_for_status()\n\nexcept Exception as error:\n    print('Error while getting UUID: %s' % (error))\n    sys.exit(1)\n\n\n# Delete account\n\ntry:\n\n    url = \"https:\/\/@@{pc_ip}@@:9440\/api\/nutanix\/v3\/accounts\/\"+uuid\n\n    myResponse = requests.delete(url,json=data,auth=HTTPBasicAuth(db[\"pc_user\"],db[\"pc_password\"]), verify=False)\n\n    if(myResponse.ok):\n\n        jData = json.loads(myResponse.content)\n\n        for key in jData:\n            formatted_json = json.dumps(jData[key], indent=4)\n            print str(key) + \" : \" + formatted_json\n    else:\n        myResponse.raise_for_status()\n\nexcept Exception as error:\n    print('Error while deleting account: %s' % (error))\n    sys.exit(1)\n\ntry:\n    db.sync()\n    db.close()\nexcept Exception as error:\n    print('Failed to close flat file: %s' % (error))\n    sys.exit(1)\n\nsys.exit(0)\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"admin"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7 Delete Project Flat File","attrs":{"exit_status":[],"script":"#!\/usr\/bin\/env bash\nset -ex\n\nrm \"@@{project_name}@@.db\"\n","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"admin_cred"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"60436c8e_runbook","main_task_local_reference":{"kind":"app_task","name":"67d7fda9_dag"},"variable_list":[{"val_type":"STRING","description":"","name":"project_name","type":"LOCAL","value":"","label":"","attrs":{"type":""},"editables":{"value":true}}]},"name":"Delete Project"}],"name":"Default","variable_list":[]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"admin_cred"},"type":"USER"},"name":"calm_aws_setup_blueprint"},"api_version":"3.0","metadata":{"last_update_time":"1549956223470981","kind":"blueprint","spec_version":100,"creation_time":"1535152356882199","name":"calm_aws_setup_blueprint"}}