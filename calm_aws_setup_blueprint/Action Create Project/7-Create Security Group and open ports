#!/usr/bin/env python

# Name:         Create Security Group and open ports
# Type:         Execute
# Script Type:  Shell
# Description:  Create a security group in the previously created vpc
#               Then, open TCP and UDP ports allowing only current PC public IP
# New keys:     sg_id

# Script:

import boto.vpc, sys, shelve

try:
    db = shelve.open("@@{project_name}@@.db")
except Exception as error:
    print('Unable to open flat file: %s' % (error))
    sys.exit(1)

accessID = db["key"]
accessKEY = db["secret"]
group_name=db["project"]+'_SG'
group_desc = 'Security Group for '+db["project"]
db["tcp"] = [@@{tcp_ports}@@]
db["udp"] = [@@{udp_ports}@@]


try:
    conn = boto.vpc.connect_to_region(db["region"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)
except Exception as error:
    print('Connection failed: %s' % (error))
    sys.exit(1)

try:
    #Create security group
    sg = conn.create_security_group(group_name, group_desc, db["vpc_id"])
    db["sg_id"] = sg.id

except Exception as error:
    print('An error occured while creating the security group: %s' % (error))
    sys.exit(1)

# print('sg_id = %s' % sg.id)

# Function to open ports only from your public IP
def open_port(protocol, port):
    sg.authorize(protocol, port, port, cidr_ip='@@{public_ip}@@/32')

for protocol in ("tcp", "udp"):

    try:
        if len(db[protocol]) > 0:
            #Open tcp ports
            for port in db[protocol]:
                open_port(protocol, port)

    except Exception as error:
        print('An error occured while opening %s ports: %s' % (protocol,error))
        sys.exit(1)

try:
    db.sync()
    db.close()
except Exception as error:
    print('Failed to close flat file: %s' % (error))
    sys.exit(1)


sys.exit(0)
