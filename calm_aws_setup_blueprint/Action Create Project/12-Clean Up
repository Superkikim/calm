#!/usr/bin/env python

# Name:         Clean Up
# Type:         Execute
# Script Type:  Shell

# Script:

import boto.ec2, sys, time, shelve, signal

try:
    db = shelve.open("@@{project_name}@@.db")
except Exception as error:
    print('Failed to open flat file: %s' % (error))
    sys.exit(1)

accessID = db["key"]
accessKEY = db["secret"]
region = db["region"]

# Create a timeout class

class TimeoutError(Exception):
    pass

class timeout:
    def __init__(self, seconds=1, error_message='Timeout'):
        self.seconds = seconds
        self.error_message = error_message
    def handle_timeout(self, signum, frame):
        raise TimeoutError(self.error_message)
    def __enter__(self):
        signal.signal(signal.SIGALRM, self.handle_timeout)
        signal.alarm(self.seconds)
    def __exit__(self, type, value, traceback):
        signal.alarm(0)

#Connect to EC2
try:
    conn = boto.ec2.connect_to_region(db["region"], aws_access_key_id=accessID, aws_secret_access_key=accessKEY)
except Exception as error:
    print('Connection failed: %s' % (error))
    sys.exit(1)

i = conn.get_all_instances(instance_ids=db["instance_id"])
instance = i[0].instances[0]

try:
    # Get list of volumes
    vol = conn.get_all_volumes(filters={'attachment.instance-id': instance.id})

    # Wait for the instance to be terminated: Time out at 60 seconds
    print('Terminating instance: Timeout in 240 seconds')
    with timeout(seconds=240):
        conn.terminate_instances(instance_ids=instance.id)
        while instance.state != 'terminated':
            instance.update()
            time.sleep(1)
except Exception as error:
    print('An error occured while termineting the instance with instance id %s: %s' % (instance.id, error))
    sys.exit(1)

# Delete volumes
try:
    for volume in vol:
        conn.delete_volume(volume.id)

except Exception as error:
    print('An error occured while deleting volumes: %s' % error)

# Release eip
try:
    conn.release_address(allocation_id=db["eip_allocation_id"])
except Exception as error:
    print('An error occured while releasing IP: %s' % error)
    sys.exit(1)

try:
    db.sync()
    db.close()
except Exception as error:
    print('Failed to close flat file: %s' % (error))
    sys.exit(1)

sys.exit(0)
