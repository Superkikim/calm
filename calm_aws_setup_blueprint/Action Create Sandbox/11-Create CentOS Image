#!/usr/bin/env python

# Name:         Create CentOS Image
# Type:         Execute
# Script Type:  Shell

# Script:

import boto.ec2, sys, time, shelve

try:
    db = shelve.open("@@{project_name}@@.db")
except Exception as error:
    print('Failed to open flat file: %s' % (error))
    sys.exit(1)

accessID = db["key"]
accessKEY = db["secret"]
region = db["region"]
image_name=db["project"]+'_image'
image_desc='CentOS 7 x64 image for '+db["project"]
instance_id = db["instance_id"]



# Create a timeout class
import signal

class TimeoutError(Exception):
    pass

class timeout:
    def __init__(self, seconds=1, error_message='Timeout'):
        self.seconds = seconds
        self.error_message = error_message
    def handle_timeout(self, signum, frame):
        raise TimeoutError(self.error_message)
    def __enter__(self):
        signal.signal(signal.SIGALRM, self.handle_timeout)
        signal.alarm(self.seconds)
    def __exit__(self, type, value, traceback):
        signal.alarm(0)

#Connect to EC2
try:
    conn = boto.ec2.connect_to_region(region, aws_access_key_id=accessID, aws_secret_access_key=accessKEY)
except Exception as error:
    print('Connection failed: %s' % (error))
    sys.exit(1)

try:
    # Create an image
    image_id = conn.create_image(instance_id,image_name,image_desc)
    image = conn.get_all_images(image_ids=[image_id])[0]
    db["image_id"] = image_id

	# Wait for image to be available
    print('Creating image: Time out 240 seconds')
    with timeout(seconds=240):
        start_time = time.time()
        while image.state != 'available':
            image.update()
            time.sleep(1)
        print("--- %s seconds ---" % (time.time() - start_time))

except Exception as error:
    print('An error occured while creating the image: %s' % (error))
    sys.exit(1)

print('ImageID: %s' % image)

try:
    db.sync()
    db.close()
except Exception as error:
    print('Failed to close flat file: %s' % (error))
    sys.exit(1)

sys.exit(0)
