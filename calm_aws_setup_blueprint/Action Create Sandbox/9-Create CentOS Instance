#!/usr/bin/env python

# Name:         Create CentOS instance
# Type:         Execute
# Script Type:  Shell
# New keys:     eip_allocation_id
#               public_ddns_name
#               instance_id

# Script:

import boto.ec2, sys, time, shelve, signal

try:
    db = shelve.open("@@{project_name}@@.db")
except Exception as error:
    print('Failed to open flat file: %s' % (error))
    sys.exit(1)

# Create a timeout class

class TimeoutError(Exception):
    pass

accessID = db["key"]
accessKEY = db["secret"]
region = db["region"]
sg_id = db["sg_id"]
subnet_id = db["subnet_id"]
instance_type = db["instance_type"]
ami_id = db["ami_id"]
keypair_name = db["project"]+'_keypair'

class timeout:
    def __init__(self, seconds=1, error_message='Timeout'):
        self.seconds = seconds
        self.error_message = error_message
    def handle_timeout(self, signum, frame):
        raise TimeoutError(self.error_message)
    def __enter__(self):
        signal.signal(signal.SIGALRM, self.handle_timeout)
        signal.alarm(self.seconds)
    def __exit__(self, type, value, traceback):
        signal.alarm(0)

#Connect to EC2
try:
    conn = boto.ec2.connect_to_region(region, aws_access_key_id=accessID, aws_secret_access_key=accessKEY)
except Exception as error:
    print('Connection failed: %s' % (error))
    sys.exit(1)

try:
    # Run an instance in our new VPC
    reservation = conn.run_instances(ami_id, key_name=keypair_name, security_group_ids=[sg_id], instance_type=instance_type, subnet_id=subnet_id)
    instance = reservation.instances[0]

    # Wait for the instance to be running: Time out at 120 seconds
    print('Waiting for instance to be running: Timeout 120 seconds')
    with timeout(seconds=120):
        while instance.state != 'running':
            instance.update()
            time.sleep(1)

except Exception as error:
    print('An error occured while running the instance: %s' % (error))
    sys.exit(1)

try:
# Create an EIP
    eip = conn.allocate_address(domain='vpc')

# And associate the EIP with our instance
    conn.associate_address(instance_id=instance.id, allocation_id=eip.allocation_id)

    # Wait until Public DNS name is actve, time out after 30 secs
    print('Waiting for public DNS name: Timeout 30 seconds')
    with timeout(seconds=30):
        while not instance.public_dns_name:
            instance.update()
            time.sleep(1)

    db["eip_allocation_id"] = eip.allocation_id
    db["public_ddns_name"] = instance.public_dns_name
    db["instance_id"] = instance.id

except Exception as error:
    print('An error occured while allocating Elastic IP: %s' % (error))
    sys.exit(1)

print('Public IP: %s\n' % format(eip.public_ip))
print('DNS name: %s (%s)\n' % (instance.public_dns_name, eip.public_ip))

# print('eip_allocation_id = %s' % eip.allocation_id)
# print('public_ddns_name = %s' % instance.public_dns_name)
# print('instance_id = %s' % instance.id)

try:
    db.sync()
    db.close()
except Exception as error:
    print('Failed to close flat file: %s' % (error))
    sys.exit(1)

sys.exit(0)
